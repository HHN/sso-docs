global
	#We accept max 60.000 concurrent connections.
	#Approx 32kb per connection (in/out) memory consumption
	maxconn 60000
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	timeout connect 5000
	timeout client  50000
	timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http
	errorfile 429 /etc/haproxy/errors/429.http

peers login-peers
	peer login01.rz.hs-heilbronn.de 141.7.96.131:10000
	peer login02.rz.hs-heilbronn.de 141.7.96.132:10000

frontend front-session
	bind 0.0.0.0:80
	bind 0.0.0.0:443 ssl crt /etc/ssl/haproxy/login.hs-heilbronn.de-cert.pem alpn h2,http/1.1 verify optional ca-file /etc/ssl/haproxy/hhn-verwaltung-client-trustchain.pem

	# send client certificate to keycloak instances
    http-request set-header SSL_CLIENT_CERT %[ssl_c_der,base64]

	# redirect to https
	http-request redirect scheme https unless { ssl_fc }
	option httplog

	# use default backend if not admin
	default_backend welcome-back-session
	# tell the backend that we use https
	http-request set-header X-Forwarded-Proto https
	http-response set-header X-Server %s

    # use keycloak for certain paths
    acl keycloak-resources  path_beg -i /resources/
    use_backend back-session if keycloak-resources

    acl keycloak-js  path_beg -i /js/
    use_backend back-session if keycloak-js

    acl keycloak-realms  path_beg -i /realms/
    use_backend back-session if keycloak-realms

    acl hhn_admin_network_allowed src <PLACE_HOLDER_FOR_NETWORKS_ALLOWED_TO_REACH_KEYCLOAK_ADMIN>

	# restrict admin endpoint from proxy
	http-request deny if { path -i -m beg /admin/ } !hhn_admin_network_allowed
#	http-request deny if !hhn_admin_network_allowed # Wartungsmodus aktivieren
	acl admin  path_beg -i /admin/
	use_backend admin-back-session if admin

	# Web Application Firewall (WAF)
	# Define placeholders for by-passing WAF (required for weird 3rd party systems like MobilityOnline)
	acl token_endpoint_no_waf_check_allowed src <PLACE_HOLDER_FOR_NETWORKS_ALLOWED_TO_BYPASS_WAF>
	filter spoe engine modsecurity config /etc/haproxy/spoe-modsecurity.conf
	http-request deny if { var(txn.modsec.code) -m int gt 0 } !hhn_admin_network_allowed !token_endpoint_no_waf_check_allowed

	# rate limiting
	# based on https://www.haproxy.com/de/blog/four-examples-of-haproxy-rate-limiting/

	stick-table  type binary  len 20  size 100k  expire 30s  store http_req_rate(10s)
	# Track client by base32+src (Host header + URL path + src IP)
	http-request track-sc0 base32+src
	# Check map file to get rate limit for path
	http-request set-var(req.rate_limit)  path,map_beg(/etc/haproxy/rates.map,200)
	# Client's request rate is tracked
	http-request set-var(req.request_rate)  base32+src,table_http_req_rate()
	# Subtract the current request rate from the limit
	# If less than zero, set rate_abuse to true
	acl rate_abuse var(req.rate_limit),sub(req.request_rate) lt 0
	# Deny if rate abuse
	http-request deny deny_status 429 if rate_abuse

	http-response set-header Server hhn-login-server
	http-response set-header X-Server hhn-login-server

backend back-session
	balance roundrobin
	option forwardfor
	hash-type consistent djb2
	stick-table type string len 32 size 1M peers login-peers
	stick on req.cook(AUTH_SESSION_ID)
	stick store-response res.cook(AUTH_SESSION_ID)
	cookie hhn-login-bs insert indirect nocache
	option httplog
	option httpchk HEAD /
	server key01 key01.rz.hs-heilbronn.de:8443 check cookie key01 ssl ca-file /etc/ssl/haproxy/auth-ca.pem
	server key02 key02.rz.hs-heilbronn.de:8443 check cookie key02 ssl ca-file /etc/ssl/haproxy/auth-ca.pem
	server key03 key03.rz.hs-heilbronn.de:8443 check cookie key03 ssl ca-file /etc/ssl/haproxy/auth-ca.pem


backend admin-back-session
	balance roundrobin
	hash-type consistent djb2
	stick-table type string len 32 size 1M peers login-peers
	stick on req.cook(AUTH_SESSION_ID)
	stick store-response res.cook(AUTH_SESSION_ID)
	cookie hhn-login-bs insert indirect nocache
	option httplog
	option httpchk HEAD /
	server key01 key01.rz.hs-heilbronn.de:8443 check cookie key01 ssl ca-file /etc/ssl/haproxy/auth-ca.pem
	server key02 key02.rz.hs-heilbronn.de:8443 check cookie key02 ssl ca-file /etc/ssl/haproxy/auth-ca.pem
	server key03 key03.rz.hs-heilbronn.de:8443 check cookie key03 ssl ca-file /etc/ssl/haproxy/auth-ca.pem
	# increased timeout on admin endpoint
	timeout server 10m

backend spoe-modsecurity
	mode tcp
	timeout connect 5s
	timeout server 5s
	server modsec-spoa1 127.0.0.1:12345


backend welcome-back-session
    mode http
    timeout connect 5s
    timeout server 5s
    server nginx-docker 127.0.0.1:8080
